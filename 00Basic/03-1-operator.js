/* -------------------------------------------------------------------------- */
/*                                    산술연산자                                */
/* -------------------------------------------------------------------------- */
// console.log(1 + 2);
// console.log(2 - 7);
// console.log(2 + 5);
// console.log(6 / 2);
// console.log(9 % 4); // 9/4 나머지 수인 1값 반환 = 홀수
// console.log(8 % 2); // 0값 반환 = 짝수

// const num = 6;
// if (num % 2 === 0) {
//   console.log(`${num} 짝수입니다.`);
// } else {
//   console.log(`${num} 홀수입니다.`);
// }

/* -------------------------------------------------------------------------- */
/*                                    부정연산자                                */
/* -------------------------------------------------------------------------- */
// Boolean : true,false
// console.log(!true);

// const isLogin = false;
// if (!isLogin) {
//   console.log("로그인되지 않았습니다.");
// } else {
//   console.log("환영합니다.");
// }
/* -------------------------------------------------------------------------- */
/*                                    비교연산자                                */
/* -------------------------------------------------------------------------- */
// 결과값은 true, false

// console.log(10 == "10"); //동등연산자
// console.log(0 == false); //동등연산자

// console.log(10 === "10"); //일치연산자
// console.log(0 === false); //일치연산자

// 부등연산자 : 결과값을 반대로
// console.log(10 != "10");
// console.log(10 != 6);

// 불일치 연산자 : 결과값을 반대로
// console.log(10 !== "10");
// console.log(0 !== false);
// console.log(1 !== 1);

/* -------------------------------------------------------------------------- */
/*                                  크기비교연산자                               */
/* -------------------------------------------------------------------------- */

// console.log(10 > 5);
// console.log(5 > 10);
// console.log(5 < 10);
// console.log(10 < 5);
// console.log(10 >= 10);
// console.log(10 >= 5);
// console.log(5 <= 5);
// console.log(5 <= 10);

/* -------------------------------------------------------------------------- */
/*                               Nullish(병합연산자)                            */
/* -------------------------------------------------------------------------- */

// ?? 연산자
// null, undefined일 경우에만 오른쪽 피연산자 반환
// a값이 정의되지 않으면(null,nudefined) b값이 출력
// let a = null;
// let b = "반갑습니다.";
// const result = a ?? b;
// console.log(result);

// || 연산자
//`null`, `undefined`, `false`, `0`, `“”`, `NaN` 등 false 값일경우 오른쪽 피연산자 반환,

/* -------------------------------------------------------------------------- */
/*                                  논리AND연산자                               */
/* -------------------------------------------------------------------------- */

// - **Boolean을** 기준으로 왼쪽 값이 **truthy**일 때 오른쪽 값을 반환합니다.
// - 왼쪽 값이 **falsy**이면 오른쪽을 확인하지 않고 바로 반환합니다.
// - 모든 falsy 값(`null`, `undefined`, `0`, `false`, `''`)에 대해 동일하게 동작합니다.

// const isLoggedIn = true;
// isLoggedIn && console.log('로그인 되었습니다.'); // 조건이 true일 때만 실행
// 왼쪽 피연산자가 truthy이면 → 오른쪽 실행
// 왼쪽 피연산자가 falsy이면 → 그대로 반환하고 오른쪽은 실행하지 않음

/* -------------------------------------------------------------------------- */
/*                                    전개연산자                                */
/* -------------------------------------------------------------------------- */

//검색해서 공부
// 🔹 1. 배열 전개 연산자

// const arr1 = [1, 2, 3];
// const arr2 = [4, 5, 6];

// const merged = [...arr1, ...arr2];
// console.log(merged); // [1, 2, 3, 4, 5, 6]
// 배열을 복사하거나 병합할 때 유용

// 구조 분해에도 사용 가능
// const [first, ...rest] = arr1;
// console.log(first); // 1
// console.log(rest);  // [2, 3]

// 🔹 2. 객체 전개 연산자
// const obj1 = { a: 1, b: 2 };
// const obj2 = { c: 3, d: 4 };

// const mergedObj = { ...obj1, ...obj2 };
// console.log(mergedObj); // { a: 1, b: 2, c: 3, d: 4 }
// 객체 병합, 복사 시 사용

// 뒤에 오는 속성이 앞의 속성을 덮어씀

// const obj3 = { a: 1, b: 2 };
// const obj4 = { b: 99, c: 3 };

// const result = { ...obj3, ...obj4 };
// console.log(result); // { a: 1, b: 99, c: 3 }

// 🔹 3. 함수 인자 전개 – 배열
// function fn(a, b, c) {
//   console.log(a, b, c);
// }

// const d = [1, 2, 3];
// fn(...d); // 1 2 3
// 배열을 함수 인자로 전달할 때 펼쳐줌

// Math.max(...arr) 이런 식으로도 많이 사용

// 🔹 4. ❌ 함수 인자 전개 – 객체 → 오류 발생!
// function fn({ a, b }) {
//   console.log(a, b);
// }

// const obj = { a: 1, b: 2 };

// // 잘못된 사용!
// fn(...obj); // ❌ TypeError 발생!
// 💥 왜 안될까?
// ...obj는 객체의 값을 배열로 펼치는 게 아님

// 함수는 객체 1개를 인자로 받아야 하고, fn(...obj)는 fn(1, 2)처럼 되어버려서 오류

// ✅ 올바른 사용법
// fn(obj); // ✅ 이렇게 객체 자체를 넘겨줘야 함
